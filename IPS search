| basesearch name="IC# reboot and shutdown status"
| append [
    search index=database OR index=custom sourcetype=informatica:node_log 
    (host=utinip72 OR host=utinip73 OR host=ugatix5n OR host=usayix7a OR host=usi8tix6z OR host=uswtix5r)
]
| stats max(Alert_Errors) as entity_value by abnode, _time
| timechart span=15m max(entity_value) as aggregate_value by abnode
| fillnull value=null

 Explanation:
Base Search: Starts with the defined saved search: IC# reboot and shutdown status.

Append: Adds results from the target search filtering specific hosts and logs.

stats max(Alert_Errors) by abnode, _time: Calculates the maximum alert error count per entity (node).

timechart span=15m: Aggregates this over a 600-minute window (configured in KPI settings).

fillnull value=null: To match the spec "fill gaps with null".

⚙️ KPI Settings Summary (in ITSI):
Entity Split Field: abnode

Unit: num

Monitoring Lag: 10

Thresholding:

Per Entity Thresholds:

Normal: 1

Low: 2

Aggregate Thresholds (if needed): Same values

Severity Mapping: Base Severity = Normal

######################################################################
(index=database OR index=custom) (sourcetype="informatica:node_log" OR sourcetype="oracle:alert:text")
| search utinip72 OR utinip73 OR usatix5n OR usatix7a OR usatix6z OR usatix5r
| eval Alert_Errors = if(sourcetype == "oracle:alert:text", 2, 1)

######################################################################
(index=database OR index=custom) (sourcetype="informatica:node_log" OR sourcetype="oracle:listener:text")
| search utinip72 OR utinip73 OR usatixn OR usatix7a OR usatix6z OR usatix5r
| eval Listener_Errors = if(sourcetype=="oracle:listener:text", 2, 1)

What this search does now:
Searches logs from:

The database or custom index.

Only where sourcetype is either informatica:node_log or oracle:listener:text.

Filters events that contain any of the following keywords (in any field):

utinip72, utinip73, usatixn, usatix7a, usatix6z, or usatix5r.

Adds a new field called Listener_Errors:

If the sourcetype is oracle:listener:text, then Listener_Errors = 2.

Otherwise, Listener_Errors = 1.
################################################################################################
(index=database) OR (index=custom sourcetype = informatica:node_log) (utinip72 OR utinip73 OR usatixn OR usatix7a OR usatix6z OR usatix5r)
leval status=case(error_type="shutdown", "3", error_type="reboot", 2,error_type="57019", 2,1=1, 1)

❗ Issues:
Incorrect use of OR and parentheses:

(index=custom sourcetype = informatica:node_log) is invalid. index and sourcetype are separate search terms and need to be grouped properly.

Typo in leval:

Should be | eval, not leval.

Incorrect field name logic:

You have 1=1 inside the case function, which is valid logic in some programming languages to denote a default, but in Splunk case() evaluates expressions; the proper default approach is to use a final true() condition.

Mixing string and numeric values inconsistently in case():

You use "3" (string), 2 (number), and 1 (number). While Splunk can handle this, it's better to stay consistent.

Correct Version:

(index=database OR index=custom) (sourcetype="informatica:node_log" OR sourcetype="oracle:listener:text")
| search utinip72 OR utinip73 OR usatixn OR usatix7a OR usatix6z OR usatix5r
| eval status=case(
    error_type == "shutdown", 3,
    error_type == "reboot", 2,
    error_type == "57019", 2,
    true(), 1
)


What This Search Does:
Searches across both database and custom indexes.

Filters for events where:

sourcetype is either informatica:node_log or oracle:listener:text.

Raw event contains any of these strings: utinip72, utinip73, usatixn, usatix7a, usatix6z, or usatix5r.

Creates a new field status using case() logic:

If error_type is "shutdown" → status = 3

If error_type is "reboot" or "57019" → status = 2

Otherwise (default) → status = 1
##########################################################################################################################
index=database)
OR (index=custom sourcetype = informatica:node_log) (utinip72 OR utinip73 OR usatixn OR usatix7a OR usatix6z OR usatix5г)
leval d_availability=if(isnotnulldatabase_name) AND tenantname="usatix8q.dhss.csd.disa.mil" OR isnotnull (dbnode), 2,1)

❗ What’s Wrong:
Syntax Errors:

index=database) has an unmatched parenthesis.

leval is a typo. It should be | eval.

isnotnulldatabase_name is invalid. Should be isnotnull(database_name).

Incorrect use of logical operators (AND, OR) without parentheses.

The Russian letter г in usatix5г is probably a typo — maybe you meant usatix5r.

if(condition1 AND condition2 OR condition3, 2, 1) logic is ambiguous without parentheses.

Logical Issues:

Conditions in the if() statement are malformed and confusing.

Misuse of field and function syntax.

Corrected Version:

(index=database OR index=custom) (sourcetype="informatica:node_log" OR sourcetype="oracle:listener:text")
| search utinip72 OR utinip73 OR usatixn OR usatix7a OR usatix6z OR usatix5r
| eval d_availability = if(
    isnotnull(database_name) AND tenantname=="usatix8q.dhss.csd.disa.mil" OR isnotnull(dbnode),
    2,
    1
)


 Even Better with Proper Parentheses for Logic Clarity:

spl
Copy
Edit
| eval d_availability = if(
    (isnotnull(database_name) AND tenantname=="usatix8q.dhss.csd.disa.mil") OR isnotnull(dbnode),
    2,
    1
)
✅ What This Fixed Search Does:
Search Scope:

Searches the database or custom index.

Filters to sourcetypes of interest (informatica:node_log or others, if you adjust).

Looks for events containing specific hostnames or system IDs (e.g., utinip72, usatix7a, etc.).

Calculates a new field d_availability:

Assigns a value of 2 if:

database_name is present AND tenantname is "usatix8q.dhss.csd.disa.mil", OR

dbnode is present.

Otherwise assigns 1.

✅ This likely reflects availability or health scoring logic for specific database nodes or tenants.
